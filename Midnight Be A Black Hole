local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/xHeptc/Kavo-UI-Library/main/source.lua"))()
local Window = Library.CreateLib("Farm Assistant", "Ocean")

-- Services
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local VirtualUser = game:GetService("VirtualUser")
local RemoteFunction = ReplicatedStorage.Remotes.RemoteFunction

-- Variables
local player = Players.LocalPlayer
local farming = false
local randomDelays = true
local antiAFK = true
local safeMode = true

-- Safety Features
local function addSafetyMeasures()
    -- Anti-AFK
    player.Idled:Connect(function()
        if antiAFK then
            VirtualUser:Button2Down(Vector2.new(0, 0), workspace.CurrentCamera.CFrame)
            wait(0.1)
            VirtualUser:Button2Up(Vector2.new(0, 0), workspace.CurrentCamera.CFrame)
        end
    end)
    
    -- Random Movement Pattern
    local function randomMovement()
        if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            local randomAngle = math.rad(math.random(1, 360))
            local distance = math.random(1, 3)
            local currentPos = player.Character.HumanoidRootPart.Position
            player.Character.HumanoidRootPart.CFrame = CFrame.new(
                currentPos.X + math.cos(randomAngle) * distance,
                currentPos.Y,
                currentPos.Z + math.sin(randomAngle) * distance
            )
        end
    end
    
    -- Random Camera Movement
    local function randomCamera()
        if workspace.CurrentCamera then
            workspace.CurrentCamera.CFrame = workspace.CurrentCamera.CFrame * CFrame.fromEulerAnglesXYZ(
                math.rad(math.random(-5, 5)),
                math.rad(math.random(-5, 5)),
                0
            )
        end
    end
    
    -- Apply Random Movements
    RunService.Heartbeat:Connect(function()
        if farming and safeMode and math.random(1, 100) <= 5 then
            randomMovement()
            randomCamera()
        end
    end)
end

-- Objects to Farm
local objectsToConsume = {
    {"QuantumFlowers", "Map.newflowers.QuantumFlowers.Hitbox"},
    {"TreeTrunk", "Map.TreeTrunks.TreeTrunk.Hitbox"},
    {"Wolf", "Map.Wolfs.Wolf.Hitbox"},
    {"Car", "Map.Cars.Car.Hitbox"},
    {"MediumTree", "Map.MediumTrees.MediumTree.Hitbox"},
    {"Bush", "Map.Bushes:FindFirstChild('Decoration-Bush').Hitbox"},
    {"Cat", "Map.Cats.Cat.Hitbox"},
    {"Bench", "Map.Benches.Bench.Hitbox"},
    {"Dog", "Map.Dogs.Dog.Hitbox"},
    {"RoadLight", "Map.RoadLights.RoadLight.Hitbox"},
    {"Cactus", "Map.Cactus.Model.Hitbox"},
    {"BeachChair", "Map.BeachChairs.BeachChairWithUmbrella.Hitbox"},
    {"SmallHouse", "Map.SmallHouses.SmallBuilding.Hitbox"}
}

-- Utility Functions
local function getRandomDelay()
    if randomDelays then
        return math.random(100, 300) / 100 -- Random delay between 1-3 seconds
    end
    return 1
end

local function getObjectFromPath(path)
    local object = workspace
    for _, part in ipairs(path:split(".")) do
        if part:find(":") then
            local funcName, arg = part:match("([^:]+):([^:]+)")
            if funcName and arg then
                arg = arg:gsub("'", "") -- Remove quotes
                object = object[funcName](object, arg)
            end
        else
            object = object[part]
        end
        if not object then
            warn("Invalid path:", path)
            return nil
        end
    end
    return object
end

-- Farm Function
local function consumeObject(objectPath)
    if not farming then return end
    
    local success, error = pcall(function()
        local object = getObjectFromPath(objectPath)
        if object then
            local args = {
                "ConsumeObject",
                object
            }
            RemoteFunction:InvokeServer(unpack(args))
        end
    end)
    
    if not success then
        warn("Error consuming object:", error)
        if safeMode then
            wait(math.random(5, 10)) -- Extra delay on errors
        end
    end
end

-- Main Farm Loop
local function startFarming()
    while farming do
        for _, objectInfo in ipairs(objectsToConsume) do
            if not farming then break end
            local name, path = objectInfo[1], objectInfo[2]
            consumeObject(path)
            wait(getRandomDelay())
        end
        wait(math.random(4, 7)) -- Random delay between cycles
    end
end

-- GUI Creation
local FarmTab = Window:NewTab("Farming")
local FarmSection = FarmTab:NewSection("Auto Farm")

FarmSection:NewToggle("Start/Stop Farming", "Toggles the auto farm", function(state)
    farming = state
    if farming then
        coroutine.wrap(startFarming)()
    end
end)

FarmSection:NewToggle("Random Delays", "Adds random delays between actions", function(state)
    randomDelays = state
end)

local SafetyTab = Window:NewTab("Safety")
local SafetySection = SafetyTab:NewSection("Safety Features")

SafetySection:NewToggle("Anti AFK", "Prevents getting kicked for being AFK", function(state)
    antiAFK = state
end)

SafetySection:NewToggle("Safe Mode", "Adds random movements and delays", function(state)
    safeMode = state
end)

-- Initialize Safety Measures
addSafetyMeasures()

-- Keybinds
local function onKeyPress(input)
    if input.KeyCode == Enum.KeyCode.RightControl then
        Library:ToggleUI()
    end
end

game:GetService("UserInputService").InputBegan:Connect(onKeyPress)

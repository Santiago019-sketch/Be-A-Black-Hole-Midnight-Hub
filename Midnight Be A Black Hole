local OrionLib = loadstring(game:HttpGet("https://raw.githubusercontent.com/shlexware/Orion/main/source"))()

local Window = OrionLib:MakeWindow({
    Name = "Farm Assistant V2",
    HidePremium = false,
    SaveConfig = true,
    ConfigFolder = "FarmAssistantConfigs"
})

-- Services
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local VirtualUser = game:GetService("VirtualUser")
local RemoteFunction = ReplicatedStorage:WaitForChild("Remotes"):WaitForChild("RemoteFunction")

-- Variables
local player = Players.LocalPlayer
local farming = false
local randomDelays = true
local antiAFK = true
local safeMode = true

-- Farming Targets
local objectsToConsume = {
    {"QuantumFlowers", "Map.newflowers.QuantumFlowers.Hitbox"},
    {"TreeTrunk", "Map.TreeTrunks.TreeTrunk.Hitbox"},
    {"Wolf", "Map.Wolfs.Wolf.Hitbox"},
    {"Car", "Map.Cars.Car.Hitbox"},
    {"MediumTree", "Map.MediumTrees.MediumTree.Hitbox"},
    {"Bush", "Map.Bushes:FindFirstChild('Decoration-Bush').Hitbox"},
    {"Cat", "Map.Cats.Cat.Hitbox"},
    {"Bench", "Map.Benches.Bench.Hitbox"},
    {"Dog", "Map.Dogs.Dog.Hitbox"},
    {"RoadLight", "Map.RoadLights.RoadLight.Hitbox"},
    {"Cactus", "Map.Cactus.Model.Hitbox"},
    {"BeachChair", "Map.BeachChairs.BeachChairWithUmbrella.Hitbox"},
    {"SmallHouse", "Map.SmallHouses.SmallBuilding.Hitbox"}
}

-- Utility Functions
local function getRandomDelay()
    return randomDelays and math.random(100, 300) / 100 or 1
end

local function getObjectFromPath(path)
    local object = workspace
    for _, part in ipairs(path:split(".")) do
        if part:find(":") then
            local funcName, arg = part:match("([^:]+):([^:]+)")
            if funcName and arg then
                arg = arg:gsub("'", "")
                object = object[funcName](object, arg)
            end
        else
            object = object[part]
        end
        if not object then
            warn("Invalid path:", path)
            return nil
        end
    end
    return object
end

local function consumeObject(objectPath)
    if not farming then return end

    local success, error = pcall(function()
        local object = getObjectFromPath(objectPath)
        if object then
            RemoteFunction:InvokeServer("ConsumeObject", object)
        end
    end)

    if not success then
        warn("Error consuming object:", error)
        if safeMode then
            wait(math.random(5, 10))
        end
    end
end

-- Farming Logic
local function startFarming()
    while farming do
        for _, objectInfo in ipairs(objectsToConsume) do
            if not farming then break end
            consumeObject(objectInfo[2])
            wait(getRandomDelay())
        end
        wait(math.random(4, 7)) -- Delay between cycles
    end
end

-- Anti-AFK
player.Idled:Connect(function()
    if antiAFK then
        VirtualUser:Button2Down(Vector2.new(0, 0), workspace.CurrentCamera.CFrame)
        wait(0.1)
        VirtualUser:Button2Up(Vector2.new(0, 0), workspace.CurrentCamera.CFrame)
    end
end)

-- UI Tabs and Sections
local FarmingTab = Window:MakeTab({
    Name = "Farming",
    Icon = "rbxassetid://4483362458",
    PremiumOnly = false
})

local SafetyTab = Window:MakeTab({
    Name = "Safety",
    Icon = "rbxassetid://4483362458",
    PremiumOnly = false
})

-- Farming Section
FarmingTab:AddToggle({
    Name = "Start/Stop Farming",
    Default = false,
    Callback = function(state)
        farming = state
        if farming then
            OrionLib:MakeNotification({
                Name = "Farming Started",
                Content = "The auto-farm is now active.",
                Image = "rbxassetid://4483362458",
                Time = 5
            })
            coroutine.wrap(startFarming)()
        else
            OrionLib:MakeNotification({
                Name = "Farming Stopped",
                Content = "The auto-farm has been stopped.",
                Image = "rbxassetid://4483362458",
                Time = 5
            })
        end
    end
})

FarmingTab:AddToggle({
    Name = "Random Delays",
    Default = true,
    Callback = function(state)
        randomDelays = state
    end
})

-- Safety Section
SafetyTab:AddToggle({
    Name = "Anti AFK",
    Default = true,
    Callback = function(state)
        antiAFK = state
    end
})

SafetyTab:AddToggle({
    Name = "Safe Mode",
    Default = true,
    Callback = function(state)
        safeMode = state
    end
})

-- UI Settings
Window:MakeKeybind({
    Name = "Toggle UI",
    Default = Enum.KeyCode.RightControl,
    HoldToInteract = false,
    Callback = function()
        OrionLib:ToggleUI()
    end
})
